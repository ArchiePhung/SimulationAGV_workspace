/*
Version	 	Date			Creater				Company
0.0  		24/07/2020      Hoang Van Quang		STI Vietnam

-Edit 4/9/2020 - Tuan : 
	+ Khong dung kalman
	+ PID 

Name:  	STI MC 8.2.ino
Author:	Hoang Van Quang
Date: 	10/07/2020

Funtion:
	Read: 
		1, PS2 -> pub Topic data button
		2, IMU -> Pub Topic data 
		3, Encoder -> Pub Topic data velocity of AGV
	Write:
		1, Control 2 Engine pass 2 diver.
C = 47 cm
D = 57 cm
currently:	speed 0.196619610406	turn 0.531441 

*/

#if (ARDUINO >= 100)
#include <Arduino.h>
#else
#include <WProgram.h>
#endif

#include "ros.h"
#include "ros/time.h"

//header file for publishing button Ps2
#include "sti_msgs/Ps2_msgs.h"
#include "sti_msgs/Status_base.h"
#include "sti_msgs/PID.h"
//header file for publishing velocities for odom
#include "sti_msgs/Velocities.h"
//header file for cmd_subscribing to "cmd_vel"
#include "geometry_msgs/Twist.h"

//header file for pid server
#include "sti_msgs/Motor_parameter.h"
#include "sti_msgs/Motor_rpm.h"

#include "sti_msgs/Imu.h"
// #define INPUT_PULLUP
#include <BNO055_Imu.h>
// #include "Imu.h"
#include "Sti_base_config.h"
#include "Sti_motor.h"
#include <Kinematics.h>
// #include "STI_PID.h" 
#include "PID.h"  
#include "Encoder.h"
#include <PSX.h>
// #include <Kalman.h> // Source: https://github.com/TKJElectronics/KalmanFilter
// #include <SimpleKalmanFilter.h>

#define ON 0  
#define OFF 1
// Static instantiation of the library
PSX psx;
// Variables to hold the controller state and error code
PSX::PSXDATA PSXdata;
int PSXerror;


// ==================================================== Control motor
unsigned char losing_control_counter_1 = 0; // count times cannot connect with PC to requir stop.
unsigned char losing_control_counter_2 = 0; // count times cannot connect with PC to requir stop.

// tốc độ được yêu cầu từ PC.
float req_linear_vel_x = 0; // speed in the form coordinates which received from PC.
float req_linear_vel_y = 0; // tốc độ đang đưuọc yêu cầu. cấp cho move_base.
float req_angular_vel_z = 0;

float req_motor1 = 0; // for reconfig parameter.
float req_motor2 = 0;

float vel_x_ros,vel_y_ros,vel_z_ros; // tốc độ nhận trực tiếp từ PC.

float current_rpm1 = 0, current_rpm2 = 0; // speed of 2 wheels which calculated after read encoder.
float req_rpm_motor1, req_rpm_motor2; // speed after calculator pass kinematic algorithms.

// STI_motor_driver motor_driver(ENABLE_PIN, BRAKE_PIN, RESET_ALARM_PIN, ROTATION_PIN1, ROTATION_PIN2, SPEED_OUT_PIN1, SPEED_OUT_PIN2, ALARM_IN_PIN1, ALARM_IN_PIN2);
STI_motor_driver motor_driver(FWD1, REV1, SPEED_OUT_PIN1, ALARM_IN_PIN1, FWD2, REV2, SPEED_OUT_PIN2, ALARM_IN_PIN2);

// Encoder motor1_encoder(MOTOR1_ENCODER_A, MOTOR1_ENCODER_B, COUNTS_PER_REV_1);
// Encoder motor2_encoder(MOTOR2_ENCODER_A, MOTOR2_ENCODER_B, COUNTS_PER_REV_2);

Kinematics kinematics1(Kinematics::STI_BASE, MAX_RPM, WHEEL_DIAMETER, FR_WHEELS_DISTANCE, LR_WHEELS_DISTANCE); // luôn luôn dùng.
Kinematics kinematics2(Kinematics::STI_BASE, MAX_RPM, WHEEL_DIAMETER, FR_WHEELS_DISTANCE, LR_WHEELS_DISTANCE); //  chỉ dùng cho chế độ reconfig

PID motor1_pid(PWM_MIN, PWM_MAX, K_P_1, K_I_1, K_D_1);
PID motor2_pid(PWM_MIN, PWM_MAX, K_P_2, K_I_2, K_D_2);

bool enb_pid = true;
// ======================================================

unsigned long pre_check_time = 0; // lưu lại thời gian pub trước đó.
unsigned long pre_control_time = 0;
unsigned long pre_pub_time = 0;
unsigned long pre_imu_time = 0;
unsigned long pre_ps2_time = 0;
unsigned long pre_check_physical = 0;
// ----- Error
bool flag_requir_ESP_reset;
bool flag_receive_commnad;
bool flag_error = 0;  
bool flag_reset = 0; 

bool error_dis_physical = 0 ; // mat ket noi vat ly
bool error_imu = 0;   // lost connect
bool error_ps2 = 0;   // lost connect
int error_connect = 0;  // lưu Lỗi: ko kết nối với thiết bị: (1 - IMU) (2 - Ps2) (3 - IMU + PS2) (ko có số - connected -> Lost connect PC)
int error_run = 0;  	// lưu Lỗi: đèn Driver báo: (1 - driver trái) (2 - Diver phải) | Gửi tốc độ nhưng ko có tín hiệu encoder thay đổi(3 - động cơ trái) (4 - động cơ phải)
int status_base;  		// lưu trạng thái của MC 8.2: (0 - unknowns) (1 - ok) (2 - error)

int pwm_motor_1 = 0;
int pwm_motor_2 = 0;

bool is_command_pc = 0;    // báo bắt đầu nhận được command từ PC.
long t;
long time_; //  đo chu kì 1 vòng quét loop.

//callback function prototypes
void CommandCallback(const geometry_msgs::Twist &cmd_msg); // ros
void RsCallback(const std_msgs::Bool &rs_msg);
void Motor1Callback(const sti_msgs::Motor_parameter &par);
void Motor2Callback(const sti_msgs::Motor_parameter &par);
void init_control_motor();
void printDebug();
void PS2_read();
void driver_reset();
void Check_dis_mc(const std_msgs::Bool &rs_msg);

ros::NodeHandle nh;

sti_msgs::Velocities raw_vel_data;
sti_msgs::Status_base status_data;
sti_msgs::Ps2_msgs ps2_data;
sti_msgs::Imu raw_imu_data;           // IMU data
sti_msgs::Motor_rpm motor_rpm;        // dùng cho phần tinh chình thông số.

ros::Publisher raw_vel_pub("raw_vel", &raw_vel_data);    		// Gửi tốc độ theo Encoder
ros::Publisher status_pub("status_base", &status_data);  		// Gửi trạng thái của Move_base
ros::Publisher ps2_pub("ps2_status", &ps2_data);         		// Gửi thông tin nút nhấn trên Ps2
ros::Publisher raw_imu_pub("raw_imu_bno055", &raw_imu_data);    // Gửi dữ liệu góc IMU.
ros::Publisher rpm_pub("motor_rpm", &motor_rpm);  
 		 		// Gửi dữ liệu tốc độ RPM.
void PIDCallback(const sti_msgs::PID &pid);
 
ros::Subscriber<sti_msgs::PID> pid_sub("pid", PIDCallback);
ros::Subscriber<geometry_msgs::Twist> cmd_sub("cmd_vel", CommandCallback);  				// Nhận tốc độ yêu cầu.
ros::Subscriber<std_msgs::Bool> reset_sub("reset_mc", RsCallback);         					// Nhận xóa lỗi.
ros::Subscriber<std_msgs::Bool> checkMC_sub("check_mc", Check_dis_mc);         					// Nhận xóa lỗi.

void PIDCallback(const sti_msgs::PID &pid)
{
    //callback function every time PID constants are received from sti_pid for tuning
    //this callback receives pid object where P,I, and D constants are stored
    motor1_pid.updateConstants(pid.p, pid.i, pid.d);
    motor2_pid.updateConstants(pid.p, pid.i, pid.d);
}
bool is_connect = false ;
float dem_connect = 0 ;
void Check_dis_mc(const std_msgs::Bool &rs_msg){
	// nh.logwarn("nhan ");
	pre_check_physical = millis() ;
}

void RsCallback(const std_msgs::Bool &rs_msg){
	flag_reset = rs_msg.data;
}

void CommandCallback(const geometry_msgs::Twist &cmd_msg){
    vel_x_ros = cmd_msg.linear.x;  // m/s
    vel_y_ros = cmd_msg.linear.y;  // m/s
    vel_z_ros = cmd_msg.angular.z; // rad/s

    flag_receive_commnad = 1;
	is_command_pc = 1;
}

// ---------------------------------------------------------------------- SETUP
void setup()
{
    nh.initNode();
    nh.getHardware()->setBaud(57600); //57600

    nh.advertise(raw_vel_pub);
	nh.advertise(status_pub);
    nh.advertise(ps2_pub);
	nh.advertise(raw_imu_pub);
	nh.advertise(rpm_pub);

	nh.subscribe(cmd_sub);
    nh.subscribe(reset_sub);
	nh.subscribe(pid_sub);
	nh.subscribe(checkMC_sub);


	delay(50);
	// ---------------------------------- MOTOR + Encoder
	init_control_motor();

    while (!nh.connected())
    {
        nh.spinOnce();
    }
	delay(50);

	// Lỗi ko kết nối với thiết bị: (1 - IMU) (2 - Ps2) (4 - Encoder + driver) error = tổng các giá trị.
	// ---------------------------------- PS2
	psx.setupPins(PS2_DAT, PS2_CMD, PS2_SEL, PS2_CLK, 10);
	psx.config(PSXMODE_ANALOG);	
	pinMode(EMC_PIN, INPUT_PULLUP);
	delay(50);

	// ---------------------------------- IMU
    if (initIMU()) {
        nh.loginfo("IMU Initialized ");
		error_imu = 0;
    }else {
		error_imu = 1;
		nh.logfatal("IMU failed to initialize. Check your IMU connection.");
	}
	delay(50);
    nh.loginfo("STI vietnam - MC 8.2 OK ('_') ");

	// motor_driver.control_enable(ON);
	motor_driver.spin(0, 0);

	delay(1000);
	pre_check_physical = millis() ;

}
// ================================================= MOTOR
void init_control_motor(){

    motor_driver.driver_pin_init();
    motor_driver.Revert1();
    // motor_driver.Revert2();	
	init_encoder(MOTOR1_ENCODER_A, MOTOR1_ENCODER_B, COUNTS_PER_REV_1, MOTOR2_ENCODER_A, MOTOR2_ENCODER_B, COUNTS_PER_REV_2);
}
/**
* @brief          : dung AGV (khong phanh)
* @details        : set tat ca thong so dieu khien toc do ve 0
* @note           : banh xe van co the lan, AGV van co the di chuyen khi dung
*/
void base_run(float vel_x, float vel_y, float vel_z) {
	// nhận tốc độ từ PC.
    req_linear_vel_x = vel_x;
    req_linear_vel_y = vel_y;
    req_angular_vel_z = vel_z;
	enb_pid = true;
}

void base_stop() {
	req_motor1 = 0; // chi cho reconfigure.
	req_motor2 = 0;
    req_linear_vel_x = 0;
    req_linear_vel_y = 0;
    req_angular_vel_z = 0;
	enb_pid = false;
}

/**
* @brief          : reset EMC
* @details        : tra lai trang thai EMC = false bang cach nhay chan ALARM_RESET_PIN, nha phanh EMC, cho phep tinh toan PID lai
* @param[in]      :
* @param[out]     :
* @return         : true: da reset xong; false: van con ton tai loi
* @requirements   : khai bao output cho chan ALARM_RESET_PIN 1 & 2
* @implements     :
* @note           : mat thoi gian 0.4s; chan ALARM_RESET_PIN 1 va 2 noi thong voi nhau
*/
void driver_reset() { // khởi tạo, xóa lỗi Driver động cơ.

	// reset biến lỗi.
	flag_error = 0;
	error_ps2 = 0;
	error_imu = 0;
	error_connect = 0;
	error_run = 0;
	enb_pid = true;
}

/**
* @brief          : kiem tra EMC
* @details        : Kiem tra chan ALARM_OUT_PIN 1 & 2 xem dong co bao EMC hay khong 
* @requirements   : khai bao input pullup cho hai chan nay (hoac phai co tro treo ben ngoai)
*/
int driver_check() { //checked
    bool alarm1, alarm2;
	alarm1 = motor_driver.read_alarm1();
	alarm2 = motor_driver.read_alarm2();
	// if (alarm1 == 0 && alarm2 == 0) {
	// 	return 0;
	// }else 
	if (alarm1 == 1 && alarm2 == 1) {
		// nh.logwarn("ALARM motor 1 + motor 2");
		return 3;
	}else if (alarm1 == 1 && alarm2 == 0) {
		// nh.logwarn("ALARM motor 1");
		return 1;
	}else if (alarm1 == 0 && alarm2 == 1) {
		// nh.logwarn("ALARM motor 2");
		return 2;
	}
	return 0;
}

int respond_engine_check(){ // kiểm tra encoder có phản hồi ko.


    if (req_rpm_motor1 != 0 && current_rpm1 == 0) 
		losing_control_counter_1 ++;
	else losing_control_counter_1 = 0;

    if (req_rpm_motor2 != 0 && current_rpm2 == 0)
		losing_control_counter_2 ++;
    else losing_control_counter_2 = 0;

	// tổng thời gian 1 lần báo lỗi = 30 * chu kì 1 vòng quét loop.

    if (losing_control_counter_1 < 100 && losing_control_counter_2 < 100) {
		return 0;
	}else if (losing_control_counter_1 >= 100 && losing_control_counter_2 >= 100) {
        nh.logfatal("Losing control: Sent control signal engine 1&2 but it doesn't move ");
		return 3;
    }else if (losing_control_counter_1 >= 100 && losing_control_counter_2 < 100) {
		nh.logfatal("Losing control: Sent control signal engine 1 but it doesn't move ");
		return 1;
	}else{
		nh.logfatal("Losing control: Sent control signal engine 2 but it doesn't move ");		
		return 2;
	}
}

/**
* @brief          : dieu khien di chuyen cua AGV (PID thuong)
* @details        : su dung tin hieu dieu khien tu ROS de tinh toan van toc 2 banh -> dieu khien
                    su dung encoder de tinh ra van toc hien tai cua AGV -> gui len ROS
* @requirements   : goi thuong xuyen, tuong ung voi tan so cai dat cua bo PID
* @implements     : 
* @note           : He thong dieu khien khong dong toc
*/
void moveBase() { // Tính toán tốc độ + điều khiển Driver + gửi tốc độ cho PC.

    // tính toán tốc độ được yêu cầu cho 2 bánh.
	Kinematics::rpm req_rpm = kinematics1.getRPM(req_linear_vel_x, req_linear_vel_y, req_angular_vel_z);
    // toc do motor PC gui xuong : v/ph
    req_rpm_motor1 = req_rpm.motor1;
    req_rpm_motor2 = req_rpm.motor2;

    // toc do motor thuc te tu ENCODER : v/ph
	// current_rpm1 = RpmKalman1.updateEstimate(enc_getRPM1());
	// current_rpm2 = RpmKalman2.updateEstimate(enc_getRPM2());
    current_rpm1 = enc_getRPM1();
    current_rpm2 = enc_getRPM2();

	if (is_command_pc == 1){
		// pwm_motor_1 = motor1_pid.compute(req_rpm_motor1, current_rpm1, enb_pid);
		// pwm_motor_2 = motor2_pid.compute(req_rpm_motor2, current_rpm2, enb_pid);
		// cần cải tiến đoạn này: khi có yêu cầu cả 2 động cơ dừng và tốc độ đi < 0.3 m/s -> lập tức dừng(cho tốc độ về 0) thay vì dừng bằng PID(giảm dần về 0) -> tránh tình huống agv lắc.
		if (enb_pid == 1){ 
			if (req_rpm_motor1 == 0 && req_rpm_motor2 == 0){				
				// pwm_motor_1 = 0;
				// pwm_motor_2 = 0;				
				pwm_motor_1 = motor1_pid.compute(req_rpm_motor1, current_rpm1, 0);
				pwm_motor_2 = motor2_pid.compute(req_rpm_motor2, current_rpm2, 0);
			}else{
				// pwm_motor_1 = 255;
				// pwm_motor_2 = 255;				
				pwm_motor_1 = motor1_pid.compute(req_rpm_motor1, current_rpm1, 1);
				pwm_motor_2 = motor2_pid.compute(req_rpm_motor2, current_rpm2, 1);				
			}
		}else{
			// pwm_motor_1 = 0;
			// pwm_motor_2 = 0;			
			pwm_motor_1 = motor1_pid.compute(req_rpm_motor1, current_rpm1, 0);
			pwm_motor_2 = motor2_pid.compute(req_rpm_motor2, current_rpm2, 0);
		}
		
		motor_driver.spin(pwm_motor_1, pwm_motor_2);
	}
	// PUB
    Kinematics::velocities current_vel;
    current_vel = kinematics1.getVelocities(current_rpm1, current_rpm2, 0, 0);

    raw_vel_data.linear_x = current_vel.linear_x;   // m/s
    raw_vel_data.linear_y = current_vel.linear_y;   // m/s
    raw_vel_data.angular_z = current_vel.angular_z; // rad/s

    raw_vel_pub.publish(&raw_vel_data);
}

// =======================================================
// lấy dữ liệu PS2
void PS2_read(void) { //checked
	static int count_error_ps2 = 0;
	// static int count_ok_ps2 = 0;
	PSXerror = psx.read(PSXdata);
	// Check if the read was successful
	if(PSXerror == PSXERROR_SUCCESS) {		
		// nh.loginfo("PS2 ok ");
		// tự động reset lỗi PS2
		// if (count_ok_ps2 > PUB_PS2_FREQUENCY){
		// 	error_ps2 = 0;
		// 	count_error_ps2 = 0;
		// }else{
		// 	count_ok_ps2++;
		// }
		if(PSXdata.buttons & PSXBTN_LEFT) 		ps2_data.left.data = 1; 	else ps2_data.left.data = 0;
		if(PSXdata.buttons & PSXBTN_DOWN)		ps2_data.down.data = 1; 	else ps2_data.down.data = 0;
		if(PSXdata.buttons & PSXBTN_RIGHT) 		ps2_data.right.data = 1; 	else ps2_data.right.data = 0;
		if(PSXdata.buttons & PSXBTN_UP)			ps2_data.up.data = 1; 		else ps2_data.up.data = 0;

		if(PSXdata.buttons & PSXBTN_START) 		ps2_data.start.data = 1; 	else ps2_data.start.data = 0;
		if(PSXdata.buttons & PSXBTN_SELECT)		ps2_data.select.data = 1;	else ps2_data.select.data = 0;

		if(PSXdata.buttons & PSXBTN_SQUARE) 	ps2_data.square.data = 1; 	else ps2_data.square.data = 0;
		if(PSXdata.buttons & PSXBTN_CROSS)		ps2_data.cross.data = 1; 	else ps2_data.cross.data = 0;
		if(PSXdata.buttons & PSXBTN_CIRCLE) 	ps2_data.circle.data = 1; 	else ps2_data.circle.data = 0;
		if(PSXdata.buttons & PSXBTN_TRIANGLE)	ps2_data.triangle.data = 1; else ps2_data.triangle.data = 0;

		if(PSXdata.buttons & PSXBTN_R1) 		ps2_data.r1.data = 1; else ps2_data.r1.data = 0;
		if(PSXdata.buttons & PSXBTN_R2)			ps2_data.r2.data = 1; else ps2_data.r2.data = 0;
		if(PSXdata.buttons & PSXBTN_R3)			ps2_data.r3.data = 1; else ps2_data.r3.data = 0;			

		if(PSXdata.buttons & PSXBTN_L1) 		ps2_data.l1.data = 1; else ps2_data.l1.data = 0;
		if(PSXdata.buttons & PSXBTN_L2)			ps2_data.l2.data = 1; else ps2_data.l2.data = 0;
		if(PSXdata.buttons & PSXBTN_L3)			ps2_data.l3.data = 1; else ps2_data.l3.data = 0;
	} else {
		if (count_error_ps2 > PUB_PS2_FREQUENCY){
			// error_ps2 = 1;
			// count_ok_ps2 = 0;
		}else{
			// count_error_ps2 ++;
		}
		// nh.logfatal("Error PS2");
	}	  			
}

// lấy dữ liệu góc.
void IMU_read() { //checked
    // pass accelerometer data to imu object
    raw_imu_data.linear_acceleration = readAccelerometer();
    //pass gyroscope data to imu object
    raw_imu_data.angular_velocity = readGyroscope();	
}

// pub dữ liệu PS2 - IMU - STATUS BASE.
void pub_data() { //checked

    if ((millis() - pre_pub_time) >= (1000 / PUB_STATUS_FREQUENCY))
    {
		pre_pub_time = millis();
		status_data.status.data = status_base;
		status_data.connect_error.data = error_connect;
		status_data.run_error.data = error_run;
		// status base.
		status_pub.publish(&status_data);
    }

    if ((millis() - pre_imu_time) >= (1000 / PUB_IMU_FREQUENCY))
    {
		pre_imu_time = millis();
        // if (!imu_is_initialized)
        // {
		// 	error_imu = 1;
		// }else{
			IMU_read();
		// }
		// publish raw_imu_data
		raw_imu_pub.publish(&raw_imu_data);
    }
	
    if ((millis() - pre_ps2_time) >= (1000 / PUB_PS2_FREQUENCY))
    {
		pre_ps2_time = millis();
		PS2_read();
		// publish PS2
		ps2_pub.publish(&ps2_data);
    }		
}

// Kiểm tra kết nối với PC: Nếu sau thời gian T ko nhận được lệnh -> lỗi.
bool communication_check(){
	if (!nh.connected()){ // Mất kết nối với ROS -> phát yêu cầu dừng động cơ -> Restart Esp.
		flag_requir_ESP_reset = 1;
		return 1;
	}
	
	// if (is_command_pc == 1){ // Kiểm tra khi có lệnh từ PC thì cho phép tính toán tốc độ, điều khiển động cơ.
	// 	if ((millis() - pre_check_time) >= (1000 / CHECK_FREQUENCY)) { // thời gian T ko nhận được tốc độ từ PC -> báo lỗi -> Dừng.
	// 		pre_check_time = millis();
	// 		if (flag_receive_commnad == 0){
	// 			return 1;
	// 		}
	// 		flag_receive_commnad = 0;
	// 	}
	return 0;
	// }

}


void loop(){
	// long time_t = 0;
	// time_t = micros();

	// kiem tra ket noi PC.
	if (communication_check() != 0){
		// bat co bao loi.
		flag_error = 1;
		error_connect = 10; // Đã kết nối vơi PC nhưng đột nhiên mất kết nối (do ko nhận được lệnh mới).
	}


	// char buffer[100];
	// sprintf(buffer, "-->t = %ld",millis() - pre_check_physical);
	if (is_command_pc == 1){ 
		if ((millis() - pre_check_physical) >= (500)) {
			// pre_check_physical = millis();
			error_dis_physical = 1;
			// nh.logerror("here ");
		}
		else{
			if (error_connect == 4){
				flag_error = 0;
				error_connect = 0;
			}
			error_dis_physical = 0;
		}
	}

	

	// Xóa lỗi, Khởi tạo lại biến.
	if (flag_reset == 1){
		driver_reset();
		flag_reset = 0;
	}

	// khi phát hiện lỗi kết nối với PC -> dừng động cơ -> reset Esp -> đợi kết nối lại.
	if (flag_requir_ESP_reset){ 

		motor_driver.spin(0, 0);
		delay(1500);
		ESP.restart();
	}

	// kiểm tra xem có lỗi ko.
	if (flag_error == 0){ 
		status_base = 1; // Status Ready
		base_run(vel_x_ros, vel_y_ros, vel_z_ros);
	}
	else{
		status_base = 2; // Status Fatal.
		base_stop();
	}

	//this block drives the robot based on defined rate
	if ((millis() - pre_control_time) >= (1000 / CONTROL_FREQUENCY))  // thời gian cập nhật tốc độ thực của 2 bánh và tính toán tóc độ -> điều khiển 2 động cơ.
	{
		pre_control_time = millis();
		moveBase();
	}

	//----------------- CHECK ERROR DEVICE
	
	if (error_ps2 == 0 && error_imu == 1){
		flag_error = 1;
		error_connect = 1;
	}else if (error_ps2 == 1 && error_imu == 0){
		flag_error = 1;
		error_connect = 2;
	}else if (error_ps2 == 1 && error_imu == 1){
		flag_error = 1;
		error_connect = 3;
	}
	
	if (error_dis_physical == 1){
		flag_error = 1;
		error_connect = 4;
		// nh.logwarn("HAHA ");
	}
	else{
		error_connect = 0;
		// nh.logwarn("ABABA ");
	}
	
	// ---------------- CHECk Driver ENGINE
	// Đèn của driver báo.
	int dr_ck = driver_check();
	if (dr_ck != 0){ // Kiểm tra đèn driver có báo ko.
		flag_error = 1;
		error_run = dr_ck; // run_error = 1 || 2;
	}
	else{
		if (error_run == 3 || error_run == 1 || error_run == 2){
			flag_error = 0;
			error_run = 0; // run_error = 1 || 2;			
		}
	}
	// // Kiểm tra phản hổi của động cơ (có tốc độ gửi xuống động cơ nhưng động cơ ko quay )
	if (is_command_pc == 1){
		// int r_e_c = respond_engine_check();
		int r_e_c = 0;
		if (r_e_c == 1){ 
			flag_error = 1;
			error_run = 4;
		}else if (r_e_c == 2){
			flag_error = 1;
			error_run = 5;
		}
	}

	// pud dữ liệu IMU + PS2 + Status cho PC.
	pub_data();

	nh.spinOnce();

	// delay(10);
	// t = micros() - time_t;
    // static unsigned long prev_debug_time = 0;
	// if(0)
    // {
    //     if ((millis() - prev_debug_time) >= (100))
    //     {
    //         printDebug();
    //         prev_debug_time = millis();
    //     }
    // }
}

void printDebug(){
    char buffer[100];
	// sprintf(buffer, "En_Trai = %ld - En_Phai = %ld", get_encoder1(), get_encoder2());

    // sprintf(buffer, "En_Trai = %ld - En_Phai = %ld", motor1_encoder.read(), motor2_encoder.read());
    //sprintf(buffer, "linear_x = %f,current_rpm1 = %d ,current_rpm2 = %d",g_req_linear_vel_x, motor1_encoder.getRPM(), motor1_encoder.getRPM());
    //  sprintf(buffer,"req_rpm_motor1 = %d ,En_Trai = %ld,req_rpm_motor2 = %d ,En_Phai = %ld ",req_rpm_motor1,motor1_encoder.read(),req_rpm_motor2,motor2_encoder.read());

	// encoder.
   // sprintf(buffer, "M: %d | %d | %d | %d ", digitalRead(MOTOR1_ENCODER_A), digitalRead(MOTOR1_ENCODER_B), digitalRead(MOTOR2_ENCODER_A), digitalRead(MOTOR2_ENCODER_B)); // 50-70 us/ loop 

	// sprintf(buffer, "PWM: %d | %d  ", pwm_motor_1, pwm_motor_2);	
	// sprintf(buffer, "M: %d | %d  ", digitalRead(MOTOR1_ENCODER_A), digitalRead(MOTOR1_ENCODER_B)); // 50-70 us/ loop 
	// alamp driver.
	// sprintf(buffer, "M: %d | %d",motor_driver.read_alarm1(), motor_driver.read_alarm2());
	// sprintf(buffer, "EMC: %d", digitalRead(EMC_PIN));
	// sprintf(buffer, "Speed current: %f | %f", current_rpm1, current_rpm2);
    sprintf(buffer, "time = %ld",t); // 50-70 us/ loop 
    nh.loginfo(buffer);
}

// rqt_plot sti_msgs/Imu/geometry_msgs/Vector3/angular_velocity/z
